import NextAuth, { NextAuthOptions } from "next-auth";
import GoogleProvider from "next-auth/providers/google";
import CredentialsProvider from "next-auth/providers/credentials";
// import { login } from "../../../utils/api"; // ‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤ login function
import axios from "axios";
export const authOptions: NextAuthOptions = {
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID!,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,
    }),
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials) {
        try {
          const res = await axios.post("http://localhost:3222/api/users/login", {
            email: credentials?.email,
            password: credentials?.password,
          });
      
          const user = res.data;
          console.log("üîπ User Data:", user); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
      
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
          if (!user.token || !credentials?.email) {
            throw new Error("User data is incomplete");
          }
      
          // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö User type ‡∏Ç‡∏≠‡∏á NextAuth
          return {
            id: user.id || "",  // ‡πÄ‡∏û‡∏¥‡πà‡∏° id ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            email: credentials?.email,
            name: user.name || "",  // ‡πÄ‡∏û‡∏¥‡πà‡∏° name ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            authToken: user.token, // ‡πÉ‡∏ä‡πâ token ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
          };
        } catch (error) {
          console.error("Login failed:", error);
          return null;
        }
      }
    }),
  ],
  secret: process.env.NEXTAUTH_SECRET,
  callbacks: {
    async jwt({ token, account, user }) {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ä‡πâ Google Login
      if (account && account.access_token) {
        token.accessToken = account.access_token;
      }

      // ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ä‡πâ Email/Password Login
      if (user) {
        token.id = user.id;
        token.email = user.email;
        token.name = user.name;
        token.authToken = user.authToken; // ‡πÄ‡∏Å‡πá‡∏ö authToken
      }

      return token;
    },

    async session({ session, token }) {
      if (session.user) {
        session.user.id = token.id as string;
        session.user.email = token.email as string;
        session.user.name = token.name as string;
        session.accessToken = token.accessToken as string | undefined;
        session.user.authToken = token.authToken as string | undefined;
      }
      return session;
    },
  },
};

export default NextAuth(authOptions);
