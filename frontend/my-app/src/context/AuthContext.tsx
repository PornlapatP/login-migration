import { createContext, useContext, useEffect, useState, ReactNode } from "react";
import { useSession, signOut } from "next-auth/react";
import { useRouter } from "next/router";
import { destroyCookie } from "nookies";

interface AuthContextType {
  token: string | null;
  login: (userToken: string) => void;
  logout: () => void;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const { data: session, status } = useSession();
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const router = useRouter();

  useEffect(() => {
    if (status === "loading") return; // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î session

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ accessToken ‡πÉ‡∏ô session
    if (session?.accessToken) {
      console.log("tttttttttttt")
      setToken(session.accessToken);
      localStorage.setItem("token", session.accessToken); // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô localStorage
    } else if (localStorage.getItem("token")) {
      // ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤‡∏°‡∏µ token ‡πÉ‡∏ô localStorage
      console.log("tttttttttttt222222")
      setToken(localStorage.getItem("token"));
    }

    setIsLoading(false); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏°‡πà‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß

  }, [session, status]);

  useEffect(() => {
    if (isLoading) return;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤ login ‡∏´‡∏£‡∏∑‡∏≠ register
    if (!token && router.pathname !== "/login" && router.pathname !== "/register") {
      router.replace("/login"); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ token ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
    }
  }, [token, isLoading, router]);

  const login = (userToken: string) => {
    localStorage.setItem("token", userToken);
    setToken(userToken);
    router.push("/"); // ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Home ‡πÄ‡∏°‡∏∑‡πà‡∏≠ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  };

  

const logout = async () => {
  console.log("üîπ ‡∏Å‡πà‡∏≠‡∏ô logout:", localStorage.getItem("token"));

  // ‡∏•‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏à‡∏≤‡∏Å localStorage
  localStorage.removeItem("token");

  // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ‡∏•‡∏ö‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ
  destroyCookie(null, "next-auth.session-token");

  // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏≤‡∏Å NextAuth
  await signOut({ redirect: false });

  console.log("üîπ ‡∏´‡∏•‡∏±‡∏á logout:", localStorage.getItem("token"));
  
  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
  router.replace("/login");
};

  
  return (
    <AuthContext.Provider value={{ token, login, logout, isLoading }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
